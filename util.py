# -*- coding: utf-8 -*-
"""
Created on Wed Sep 21 14:48:05 2022

@author: Pierre Boniface
"""

import numpy as np

def initialize_rules(windowLength):

    conditionList = [] # Empty list to be filled with sequential pinary numbers
    responseList = [0] * (2 ** windowLength) # WIP genome to be generated by evo
    n = 0

    for n in range(2 ** windowLength):

        # Appends n in binary format to list of conditions
        conditionList.append(format(n, ('0' + str(windowLength) + 'b')))
        n += 1

    # Merges the list of conditions with the list of responses
    return dict(zip(conditionList, responseList))



def initalize_window(worldWidth, angel):

    # Maps the angle to a value between zero and the maximum binary worldwidth and converts to binary string
    binaryString = format(int(np.interp(angel,[-0.2095,0.2095],[0,2**worldWidth])), ('0' + str(worldWidth) + 'b'))

    worldMap = []

    n = 0

    for _ in range(worldWidth):

        # Appends the each character in the binary string as an int to the worldMap array
        worldMap.append(int(binaryString[n]))
        n += 1

    return worldMap



print(initialize_rules(3))
print(initalize_window(8, 0.2))