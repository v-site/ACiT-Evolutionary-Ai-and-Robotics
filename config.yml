#Hyper paramaters
#global
seed: null



#CA_world_parameters:
worldWidth: 15 #
windowLength: 7 #neigbourhood, must be odd (3 gives a genome length of 8 bit (2^3), 5; 32, 7; 128, 9; 256, 12; 1024)
windowSpacing: 5 #number of empty (zero) celles between each observation string in the world map



#simulation parameters
generations: 100 #Defines the ammounts of epochs for the evolutionary algorithm
maxSteps: 500 #The max steps the CA can controll the cartPole
populationSize: 100 #should be divisible by crossover ratio
maxAttempts: 3 #maximum attempts to controll the cart pole



#ploting parameters
plotFrequency: 10 #plot every x generations, set equal to generations to only plot at the end of runtime
polyFactor: 5



#CA_action
iterations: 6 #Iterations over the search window, before action is taken



#evolving parameters:
breedType: 'uniform' # ['one-point', 'two-point',  'uniform']
votingMethod: 'equal_split' # ['majority', 'equal_split']
mutationRatio: 0.01 #the posibility of a single bit in the child genome fliping state
cutSize: 0.2 #the elite of the



#TO-DO: after
  #DONE:change the fitness-function: abort run when fail, give CA x attempts. Rewards = best or avg of runs
  #DONE:implement emtpy cells between the different info-elements, these beeing pole-angle, and poaition
    #DONE:define chucnks, to deivde the information that is passed to the CA from the cartPole
  #use the whole population to reproduce, use turnament selection. Implement turnament selection, so the whole pop gets the oppurtunity to reproduce
  #reduce the ammount of elites to around 5-10%
  #random chould be less then 10%
  #DONE: Crete plot x = generations y = []
  #datalogger

 #NN-tasks
 #
